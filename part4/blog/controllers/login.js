const jwt = require('jsonwebtoken');
const bcrypt = require('bcrypt');
const loginRouter = require('express').Router();
const User = require('../models/user.js');

// https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication#authentication_schemes
// using bearer authorization
// The bearer token is a cryptic string, usually generated by the server in response to a login request. 
// The client must send this token in the Authorization header while requesting to protected resources:

// user logins, a token will be created to allow access in updating and deleting blogs.
loginRouter.post('/', async (request, response) => {
    const body = request.body;
  
    const user = await User.findOne({username: body.username});

    const passwordCorrect = user === null
      ? false
      : await bcrypt.compare(body.password, user.passwordHash) // bcrypt.compare is used to check if the  password is correct
  
    // if user is null and password is incorrect then send a http 401
    if(!(user && passwordCorrect)) 
    {
      return response.status(401).json({error: 'invalid username or password'});
    }
    
  
  // create obj that has username and user ID
  const userForToken = {
    username: user.username,
    id: user._id,
  }

  // sign the userForToken obj we created to have the SECRET token for user to be able to do things on the website
  const token = jwt.sign(userForToken, process.env.SECRET);

  // sends the token as this type => xxxxx.yyyyy.zzzzz and username and name
  // This can be seen in login.rest 
  // Good to have if you want to display username or name if user logs in successfully
    response
      .status(200)
      .send({token, username: user.username, name: user.name})
  })
  
  module.exports = loginRouter